{"version":3,"sources":["stackcalc/Stackcalc.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stackcalc","state","num","Math","abs","this","result","push","className","parseInt","type","onChange","e","setState","target","value","min","max","Number","MAX_SAFE_INTEGER","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAGqBA,E,4MACjBC,MAAQ,CACJC,IAAI,G,4CAIR,WAAU,IAAD,OACDA,EAAMC,KAAKC,IAAIC,KAAKJ,MAAMC,KAC1BI,EAAS,GAcb,OAZKJ,GAAO,OACRI,EAAOC,KAAK,gCAAK,sBAAMC,UAAU,MAAhB,SAAuBC,SAASP,EAAM,QAAa,sBAAMM,UAAU,QAAhB,SAAyB,aAAeC,SAASP,EAAM,OAAO,EAAE,GAAG,KAAO,WAE9IA,GAAO,KAAOO,SAASP,EAAM,OAG5BA,GAAO,IACRI,EAAOC,KAAK,gCAAK,sBAAMC,UAAU,MAAhB,SAAuBC,SAASP,EAAM,MAAW,sBAAMM,UAAU,QAAhB,SAAyB,UAAYC,SAASP,EAAM,KAAK,EAAE,GAAG,KAAO,OAAY,2BAGvJI,EAAOC,KAAK,gCAAK,sBAAMC,UAAU,MAAhB,SAAuBN,EAAM,KAAU,sBAAMM,UAAU,QAAhB,SAAyB,SAAWN,EAAM,IAAI,EAAE,GAAG,WAGvG,sBAAKM,UAAU,iBAAf,UACI,oBAAIA,UAAU,SAAd,sBAEA,uBAAOA,UAAU,QAAQE,KAAK,SAASC,SAAW,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEX,IAAKU,EAAEE,OAAOC,SAAUC,IAAI,IAAIC,IAAKC,OAAOC,mBAEnH,mBAAGX,UAAU,SAAb,SAAuBF,W,GA5BAc,aCQxBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.47a007d9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Stackcalc.css'\r\n\r\nexport default class Stackcalc extends Component {\r\n    state = {\r\n        num:0\r\n    }\r\n\r\n    \r\n    render() {\r\n        let num = Math.abs(this.state.num)\r\n        let result = []\r\n\r\n        if ( num >= 1728) {\r\n            result.push(<div><span className=\"big\">{parseInt(num / 1728)}</span><span className=\"small\">{' shulcker' + (parseInt(num / 1728)<=1?'':'s') + ', '}</span></div>)\r\n\r\n            num -= 1728 * parseInt(num / 1728)\r\n        }\r\n\r\n        if ( num >= 64) {\r\n            result.push(<div><span className=\"big\">{parseInt(num / 64)}</span><span className=\"small\">{' stack' + (parseInt(num / 64)<=1?'':'s') + ', '}</span><br/></div>)\r\n        }\r\n\r\n        result.push(<div><span className=\"big\">{num % 64}</span><span className=\"small\">{' item' + (num % 64<=1?'':'s')}</span></div>)\r\n        \r\n        return (\r\n            <div className=\"calc-container\">\r\n                <h1 className=\"header\">Minecalc</h1>\r\n\r\n                <input className=\"input\" type=\"number\" onChange={ e => this.setState({ num: e.target.value })} min=\"0\" max={Number.MAX_SAFE_INTEGER}/>\r\n\r\n                <p className=\"result\">{result}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Stackcalc from './stackcalc/Stackcalc';\n\nfunction App() {\n  return (\n    <div>\n      <Stackcalc />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}